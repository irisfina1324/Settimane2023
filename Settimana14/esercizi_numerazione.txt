# 51

AA35 = 1010 1010 0011 0101  (-)
69BE = 0110 1001 1011 1110  (+)

in CA2
  11 1       111 1
  1010 1010 0011 0101 +
  0110 1001 1011 1110 = 
  ===================
  0001 0011 1111 0011
 
AA35+69BE = 13F3
non c'è overflow perché i segni erano discordi


in MS

AA35 = - 010 1010 0011 0101  a<0
69BE = + 110 1001 1011 1110  b>0

|a+b| = |b| - |a|
segno(a+b) = positivo

   22 -2   
  --- 2-2         -2
  110 1001 1011 1110 -
  010 1010 0011 0101 =
  ==================
  011 1111 1000 1001
  
Risultato è : + 011 1111 1000 1001
               0011 1111 1000 1001
			   3F89
Niente overflow perché nella sottrazione non ho avuto riporti in uscita dal MSB

# 50

numeri in CA2
73 = 0111 0011 +
99 = 1001 1001
sum  0000 1100  = 0C
non c'è overflow perché i segni erano discordi

# 49

n = 43(6) -> in base 7?

n in base 10 = 4 x 6^1 + 3 * 6^0 = 27

devo scrivere 27 in base 7

27 : 7 = 3 resto 6
3 : 7 = 0 resto 3

27 in base 7 si scrive 36

verifica: 3 * 7^1 + 6 * 7^0 = 21+6

# 48

 A=1AF e B=8F02
 calcolare A-B
        
		-2-2 -2
        2-2- 2-2  
 01AF = 0000 0001 1010 1111  -
 8F02 = 1000 1111 0000 0010  =
        ===================
		0111 0010 1010 1101  = 72AD
		
positivo - negativo = positivo => no overflow

in base 10: 
	7 * 16^3 + 2 * 16^2 + 10 * 16^1 + 13 * 16^0
	7 * 4096 + 2 * 256 + 10 * 16 + 13 = ...

# 47

F1A7 = 1111 0001 1010 0111 = 33 01 22 13 = 170647

1A43 = 0001 1010 0100 0011 = 01 22 10 03 = 015103
	
# 46

5B, 4F, DA
 +   +   -
 
DA perché è l'unico negativo
4F
5F dal confronto delle 'decine'

# 45

C2A4 = 1100 0010 1010 0100 = 30022210 = 141244
A0C3 = 1010 0000 1100 0011 = 22003003 = 120303

# 44

12(i) + 10(i) = 16

(1 * i^1 + 2 * i^0) + (1 * i^1) = 16
i + 2 + i = 16
2i = 14
i = 7

Verifica
12(7) = 7+2 =9
10(7) = 7
9+7=16

# 43

come gli altri

# 42

CB, 7F, AA in ordine crescente
-    +   -

7F è il più grande

CB = 1100 1011 maggiore
AA = 1010 1010 minore

Nota: -1 vale 1111 1111

Nell'ordine: AA, CB, 7F

# 41

numeri in ca2 su 6 bit

    001101 = 2^3 + 2^2 + 2^0 = 8+4+1 = 13

    110011 = -2^5 +2^4 +2^1 + 2^0 = -32+16+2+1 = -13
	
# 40


    CA2: 0111 + 1110 = 0101 no ovf x segni discordi
	
	0111 +
	1110
	----
	0101
	
	
    CA2: 0111 - 1110 = 1001 c'è overflow perché (+)-(-)=(-)
	
	0111 -
	1110
	----
	1001	
	
    Binario puro: 0111 + 1110 = 0101
	c'è overflow perché riporto in uscita dal MSB
	
   1
	0111 +
	1110 
	----
	0101

# 39

Virgola fissa su N bit (16 p. esempio) dedicano un numero fisso di bit a rappresentare la parte intera, ed i rentanti a rappresentare la parte frazionaria
quindi tutti i bit contribuiscono al valore del numero.

Ad esempio 10 bit per parte intera, 6 per frazionaria.
2^10-1 è il max numero rappresentabilie
2^-6 è la precisione minima ottenibile

Virgola mobile su N bit, dedico alcuni bit a rappresentare un esponente, ed i restanti alla parte frazionaria (mantissa), dando per scontato che la parte intera sia 1.
10 bit per mantissa (parte frazionaria)
6 bit per l'esponente, posso avere esponenti che vanno da -16 a +16
Numero più grande sarà dell'ordine di 2^16
Numero pìu piccolo dell'ordine di 2^-16
Precisione sarà sempre di 2^-10 rispetto al valore del numero.

# 38

    53 - 35

	53 = 32 + 16 + 4 + 1 = 00110101
	35 = 32+2+1 =          00100011

        -
   00110101-
   00100011
   --------
   00010010

    62 - 13
	
	62 = 00111110
	13 = 00001101
          -	
	00111110 -
	00001101 =
	--------
	00110001
	
# 37

in compl a 2 su 6 bit
su 6 bit sono rappresentabili i numeri da -2^5 a +2^5-1
cioè da -32 a +31

Quindi nessuno di questi numeri è rappresentabile su 6 bit in CA2

    +60
    -60
    +70

# 36

in ca2 su 6 bit

il valore più piccolo
	100000 = base 8 è 40
	
il valore più grande
	011111 = base 8 è 37

# 35

01 A2 B2 32 80 7F FF

negativi
A2 B2 80 FF
80<A2<B2<FF

positivi
01 32 7F

80<A2<B2<FF<01<32<7F

# 34

(a) A000 (b) 0A00 (c) FFFF (d) 0011
     -         +        -        +
	 
A000 < FFFF < 0011 < 0A00

# 33

12(i)+10(i)=112(3)

112(3) = 1 * 3^2 + 1 * 3^1 + 2 * 3^0 = 9+3+2 = 14

i+2+i=14
2i=12 
i=6

# 32

Virgola mobile

   S MMMMMMMMMMM sEEEE
   
   Segno
   Mantissa
   Esponente
   
   Rappresentano un numero il cui valore
   è dato da 
		S * 1.MMMMMMMMMM * 2 ^sEEEE
